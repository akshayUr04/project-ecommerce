// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/akshayur04/project-ecommerce/pkg/usecase/interface (interfaces: UserUseCase)

// Package mockUsecase is a generated GoMock package.
package mockUsecase

import (
	context "context"
	reflect "reflect"

	helperStruct "github.com/akshayur04/project-ecommerce/pkg/common/helperStruct"
	response "github.com/akshayur04/project-ecommerce/pkg/common/response"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(arg0 int, arg1 helperStruct.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), arg0, arg1)
}

// IsSignIn mocks base method.
func (m *MockUserUseCase) IsSignIn(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSignIn", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSignIn indicates an expected call of IsSignIn.
func (mr *MockUserUseCaseMockRecorder) IsSignIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSignIn", reflect.TypeOf((*MockUserUseCase)(nil).IsSignIn), arg0)
}

// OtpLogin mocks base method.
func (m *MockUserUseCase) OtpLogin(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtpLogin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OtpLogin indicates an expected call of OtpLogin.
func (mr *MockUserUseCaseMockRecorder) OtpLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtpLogin", reflect.TypeOf((*MockUserUseCase)(nil).OtpLogin), arg0)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(arg0, arg1 int, arg2 helperStruct.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), arg0, arg1, arg2)
}

// UpdatePassword mocks base method.
func (m *MockUserUseCase) UpdatePassword(arg0 int, arg1 helperStruct.UpdatePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserUseCaseMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserUseCase)(nil).UpdatePassword), arg0, arg1)
}

// UserEditProfile mocks base method.
func (m *MockUserUseCase) UserEditProfile(arg0 int, arg1 helperStruct.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditProfile", arg0, arg1)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserEditProfile indicates an expected call of UserEditProfile.
func (mr *MockUserUseCaseMockRecorder) UserEditProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditProfile", reflect.TypeOf((*MockUserUseCase)(nil).UserEditProfile), arg0, arg1)
}

// UserLogin mocks base method.
func (m *MockUserUseCase) UserLogin(arg0 context.Context, arg1 helperStruct.LoginReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseMockRecorder) UserLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserUseCase)(nil).UserLogin), arg0, arg1)
}

// UserSignUp mocks base method.
func (m *MockUserUseCase) UserSignUp(arg0 context.Context, arg1 helperStruct.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", arg0, arg1)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserUseCaseMockRecorder) UserSignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserUseCase)(nil).UserSignUp), arg0, arg1)
}

// Viewprfile mocks base method.
func (m *MockUserUseCase) Viewprfile(arg0 int) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Viewprfile", arg0)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Viewprfile indicates an expected call of Viewprfile.
func (mr *MockUserUseCaseMockRecorder) Viewprfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Viewprfile", reflect.TypeOf((*MockUserUseCase)(nil).Viewprfile), arg0)
}
