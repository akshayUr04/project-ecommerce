definitions:
  helperStruct.Address:
    properties:
      city:
        type: string
      district:
        type: string
      house_number:
        type: string
      id:
        type: integer
      isdefault:
        type: boolean
      landmark:
        type: string
      pincode:
        type: integer
      street:
        type: string
    required:
    - city
    - district
    - house_number
    - landmark
    - pincode
    - street
    type: object
  helperStruct.Category:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  helperStruct.Coupons:
    properties:
      code:
        type: string
      discountmaximumamount:
        type: number
      discountpercent:
        type: number
      expirationdate:
        type: string
      minimumpurchaseamount:
        type: number
    type: object
  helperStruct.CreateAdmin:
    properties:
      email:
        type: string
      isSuper:
        type: boolean
      name:
        type: string
      password:
        type: string
    required:
    - email
    - isSuper
    - name
    - password
    type: object
  helperStruct.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  helperStruct.OTPData:
    properties:
      phoneNumber:
        type: string
    required:
    - phoneNumber
    type: object
  helperStruct.Product:
    properties:
      brand:
        type: string
      categoryid:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - brand
    - categoryid
    - description
    - name
    type: object
  helperStruct.ProductItem:
    properties:
      battery:
        type: integer
      camera:
        type: integer
      colour:
        type: string
      image:
        type: string
      price:
        type: integer
      productid:
        type: integer
      quantity:
        type: integer
      ram:
        type: integer
      screensize:
        type: number
      sku:
        type: string
      storage:
        type: integer
    type: object
  helperStruct.UpdatePassword:
    properties:
      newpassword:
        type: string
      oldpassword:
        type: string
    type: object
  helperStruct.UserReq:
    properties:
      email:
        type: string
      mobile:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - mobile
    - name
    type: object
  helperStruct.VerifyOtp:
    properties:
      code:
        type: string
      user:
        $ref: '#/definitions/helperStruct.OTPData'
    required:
    - code
    - user
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      stastuscode:
        type: integer
    type: object
info:
  contact: {}
paths:
  /addaddress/:
    post:
      consumes:
      - application/json
      description: Add address
      operationId: add-address
      parameters:
      - description: User address
        in: body
        name: user_address
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Address'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can add address
      tags:
      - Users
  /addcoupontocart/{coupon_id}:
    patch:
      consumes:
      - application/json
      description: User can add coupon to the cart
      operationId: applay-coupon-to-cart
      parameters:
      - description: coupon_id
        in: path
        name: coupon_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can add a coupon to the cart
      tags:
      - Cart
  /addtocart/{product_item_id}:
    post:
      consumes:
      - application/json
      description: User can add product item to the cart
      operationId: add-to-cart
      parameters:
      - description: product_item_id
        in: path
        name: product_item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can add a product item to the cart
      tags:
      - Cart
  /addtofav/{productId}:
    post:
      consumes:
      - application/json
      description: User can add product item to favourites
      operationId: add-to-favourites
      parameters:
      - description: ID of the product item to be added to wishlist
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can add product item to favourites
      tags:
      - Favourites
  /admin/addcatergory/:
    post:
      consumes:
      - application/json
      description: Admin can create new category from admin panel
      operationId: create-category
      parameters:
      - description: New category name
        in: body
        name: category_name
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create new product category
      tags:
      - Product Category
  /admin/addproduct/:
    post:
      consumes:
      - application/json
      description: Admins can create new product listings
      operationId: create-product
      parameters:
      - description: new product details
        in: body
        name: new_product_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can create new product listings
      tags:
      - Product
  /admin/addproductitem/:
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin user to create a new product item.
      operationId: create-product-item
      parameters:
      - description: Product item details
        in: body
        name: product_item
        required: true
        schema:
          $ref: '#/definitions/helperStruct.ProductItem'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added new product item
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to add new product item
          schema:
            $ref: '#/definitions/response.Response'
      summary: Creates a new product item
      tags:
      - Product Item
  /admin/adminlogin:
    post:
      consumes:
      - application/json
      description: Admin login
      operationId: admin-login
      parameters:
      - description: Admin login credentials
        in: body
        name: admin_credentials
        required: true
        schema:
          $ref: '#/definitions/helperStruct.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - Admin
  /admin/adminlogout:
    post:
      consumes:
      - application/json
      description: Logs out a logged-in admin from the E-commerce web api admin panel
      operationId: admin-logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
      summary: Admin Logout
      tags:
      - Admin
  /admin/blockuser/{id}:
    patch:
      consumes:
      - application/json
      description: Admins can block users
      operationId: block-users
      parameters:
      - description: ID of the user to be blocked
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can bolock users
      tags:
      - Admin
  /admin/createadmin:
    post:
      consumes:
      - application/json
      description: Super admin can create a new admin from admin panel.
      operationId: create-admin
      parameters:
      - description: New Admin details
        in: body
        name: admin_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.CreateAdmin'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new admin from admin panel
      tags:
      - Admin
  /admin/createcoupon/:
    post:
      consumes:
      - application/json
      description: Admin can create new coupons
      operationId: create-coupon
      parameters:
      - description: details of new coupon to be created
        in: body
        name: new_coupon_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Coupons'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can create new coupon
      tags:
      - Coupon
  /admin/deletecoupon/{couponId}:
    delete:
      consumes:
      - application/json
      description: Admin can delete existing coupon
      operationId: delete-coupon
      parameters:
      - description: details of coupon to be updated
        in: path
        name: coupon_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can delete existing coupon
      tags:
      - Coupon
  /admin/deleteproduct/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows an admin user to delete a product by ID.
      operationId: delete-product
      parameters:
      - description: Product ID to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/response.Response'
      summary: Deletes a product by ID
      tags:
      - Product
  /admin/deleteproductitem/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product item from the system
      operationId: delete-product-item
      parameters:
      - description: ID of the product item to be deleted
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Deletes a product item from the system
      tags:
      - Product Item
  /admin/downloadsales/:
    get:
      consumes:
      - application/json
      description: Admin can download sales report in .csv format
      operationId: download-sales-report
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can download sales report
      tags:
      - Admin
  /admin/findall:
    get:
      consumes:
      - application/json
      description: Admin can find all registered users
      operationId: find-all-users
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      - description: Search query string
        in: query
        name: query
        type: string
      - description: Filter criteria for the users
        in: query
        name: filter
        type: string
      - description: Sorting criteria for the users
        in: query
        name: sort_by
        type: string
      - description: Sorting in descending order
        in: query
        name: sort_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can find all registered users
      tags:
      - Admin
  /admin/findcategories/{id}:
    get:
      consumes:
      - application/json
      description: Users and admins can fetch details of a specific category using
        id
      operationId: find-category-by-id
      parameters:
      - description: category id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Fetch details of a specific category using category id
      tags:
      - Product Category
  /admin/finduser/{id}:
    get:
      consumes:
      - application/json
      description: Admins can find users with id
      operationId: find-users
      parameters:
      - description: ID of the user to be found
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can find a user
      tags:
      - Admin
  /admin/getdashboard:
    get:
      consumes:
      - application/json
      description: Admin can access dashboard and view details regarding orders, products,
        etc.
      operationId: admin-dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Dashboard
      tags:
      - Admin
  /admin/listallcategories/:
    get:
      consumes:
      - application/json
      description: Admin, users and unregistered users can see all the available categories
      operationId: view-all-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: View all available categories
      tags:
      - Product Category
  /admin/salesreport/:
    get:
      consumes:
      - application/json
      description: Admin can view the sales report
      operationId: view-sales-report
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can view sales report
      tags:
      - Admin
  /admin/unblockuser/{id}:
    patch:
      consumes:
      - application/json
      description: Admins can block users
      operationId: unblock-users
      parameters:
      - description: ID of the user to be blocked
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can unbolock a blocked user
      tags:
      - Admin
  /admin/updatecoupen/{couponId}:
    patch:
      consumes:
      - application/json
      description: Admin can update existing coupon
      operationId: update-coupon
      parameters:
      - description: Coupon ID
        in: path
        name: couponId
        required: true
        type: string
      - description: details of coupon to be updated
        in: body
        name: coupon_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Coupons'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can update existing coupon
      tags:
      - Coupon
  /admin/updatedcategory/{id}:
    put:
      consumes:
      - application/json
      description: Admin can update category details
      operationId: update-category
      parameters:
      - description: ID of the Category to be updated
        in: path
        name: Id
        required: true
        type: string
      - description: category info
        in: body
        name: category_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can update category details
      tags:
      - Product Category
  /admin/updatedproductitem/{id}:
    patch:
      consumes:
      - application/json
      description: Update an existing product item with new information.
      operationId: update-product-item
      parameters:
      - description: ID of the productitem to be updated
        in: path
        name: Id
        required: true
        type: string
      - description: Product item information to update
        in: body
        name: product_item
        required: true
        schema:
          $ref: '#/definitions/helperStruct.ProductItem'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a product item
      tags:
      - Product Item
  /admin/updateproduct/{id}:
    put:
      consumes:
      - application/json
      description: This endpoint allows an admin user to update a product's details.
      operationId: update-product
      parameters:
      - description: ID of the product to be updated
        in: path
        name: Id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: updated_product_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Product'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully updated product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Unable to update product
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin can update product details
      tags:
      - Product
  /admin/userdisaplayproductitem/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a product item by its ID
      operationId: find-product-item-by-id
      parameters:
      - description: Product item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieve a product item by ID
      tags:
      - Product Item
  /admin/viewcoupon/{couponId}:
    get:
      consumes:
      - application/json
      description: Admins and users can see coupon with id
      operationId: view-coupon-by-id
      parameters:
      - description: coupon_id
        in: path
        name: coupon_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admins and users can see coupon with coupon id
      tags:
      - Coupon
  /admin/viewcoupons/:
    get:
      consumes:
      - application/json
      description: Admins and users can see all available coupons
      operationId: view-coupons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admins and users can see all available coupons
      tags:
      - Coupon
  /editprofile:
    patch:
      consumes:
      - application/json
      description: Users can update their profile
      operationId: update-user-profile
      parameters:
      - description: User profile
        in: body
        name: user_profile
        required: true
        schema:
          $ref: '#/definitions/helperStruct.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can update their profile
      tags:
      - Users
  /listallorder:
    get:
      consumes:
      - application/json
      description: Endpoint for getting all orders associated with a user
      operationId: view-all-orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieves all orders of currently logged in user
      tags:
      - Order
  /listallproduct/:
    get:
      consumes:
      - application/json
      description: Admins and users can ses all available products
      operationId: user-view-all-products
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      - description: Search query string
        in: query
        name: query
        type: string
      - description: Filter criteria for the product items
        in: query
        name: filter
        type: string
      - description: Sorting criteria for the product items
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admins and users can see all available products
      tags:
      - Product
  /listcart:
    get:
      consumes:
      - application/json
      description: User can view cart and cart items
      operationId: view-cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can view cart items and total
      tags:
      - Cart
  /logout:
    post:
      consumes:
      - application/json
      description: Logs out a logged-in user from the E-commerce web api
      operationId: user-logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: User Logout
      tags:
      - Users
  /orderall/{paymentId}:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to purchase all items in their cart
      operationId: buyAll
      parameters:
      - description: payment_id
        in: path
        name: payment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Buy all items from the user's cart
      tags:
      - Order
  /orders/cancel/{orderId}:
    patch:
      consumes:
      - application/json
      description: Endpoint for cancelling an order associated with a user
      operationId: cancel-order
      parameters:
      - description: ID of the order to be cancelled
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Cancels a specific order for the currently logged in user
      tags:
      - Order
  /payments/razorpay/{orderId}:
    get:
      consumes:
      - application/json
      description: Users can make payment via Razorpay after placing orders
      operationId: create-razorpay-payment
      parameters:
      - description: Orderid
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Users can make payment
      tags:
      - Payment
  /payments/success/:
    get:
      consumes:
      - application/json
      description: Handler for automatically updating payment details upon successful
        payment
      operationId: payment-success
      parameters:
      - description: Payment details
        in: query
        name: c
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated payment details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to update payment details
          schema:
            $ref: '#/definitions/response.Response'
      summary: Handling successful payment
      tags:
      - Payment
  /removecoupon:
    patch:
      consumes:
      - application/json
      description: User can add coupon to the cart
      operationId: remove-coupon-to-cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can remove the coupon that added to the cart
      tags:
      - Cart
  /removefromcart/{product_item_id}:
    delete:
      consumes:
      - application/json
      description: User can remove product from cart
      operationId: remove-from-cart
      parameters:
      - description: product_item_id
        in: path
        name: product_item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Remove a product from the cart
      tags:
      - Cart
  /removefromfav/{productId}:
    delete:
      consumes:
      - application/json
      description: User can remove product item from favourites
      operationId: remove-from-favourites
      parameters:
      - description: ID of the product item to be added to wishlist
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can remove product item from favourites
      tags:
      - Favourites
  /return/{orderId}:
    patch:
      consumes:
      - application/json
      description: Endpoint for Returning an order associated with a user
      operationId: return-order
      parameters:
      - description: ID of the order to be cancelled
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      summary: Return a specific order for the currently logged in user
      tags:
      - Order
  /sendotp:
    post:
      consumes:
      - application/json
      description: Send OTP to use's mobile
      operationId: send-otp
      parameters:
      - description: User mobile number
        in: body
        name: user_mobile
        required: true
        schema:
          $ref: '#/definitions/helperStruct.OTPData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP to user's mobile
      tags:
      - Otp
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user with the specified details.
      operationId: user-signup
      parameters:
      - description: User details
        in: body
        name: user_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: UserSignUp
      tags:
      - Users
  /updateaddress/{addressId}:
    patch:
      consumes:
      - application/json
      description: Update address
      operationId: update-address
      parameters:
      - description: addressId
        in: path
        name: addressId
        required: true
        type: string
      - description: User address
        in: body
        name: user_address
        required: true
        schema:
          $ref: '#/definitions/helperStruct.Address'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can update existing address
      tags:
      - Users
  /updatepassword:
    patch:
      consumes:
      - application/json
      description: Users can update their Password
      operationId: update-user-Password
      parameters:
      - description: User password
        in: body
        name: user_profile
        required: true
        schema:
          $ref: '#/definitions/helperStruct.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can update their Password
      tags:
      - Users
  /userdisaplayallproductItems/:
    get:
      consumes:
      - application/json
      description: view all product items for user
      operationId: user-view-all-product-items
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items to retrieve per page
        in: query
        name: limit
        type: integer
      - description: Search query string
        in: query
        name: query
        type: string
      - description: Filter criteria for the product items
        in: query
        name: filter
        type: string
      - description: Sorting criteria for the product items
        in: query
        name: sort_by
        type: string
      - description: Sorting in descending order
        in: query
        name: sort_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Handler function to view all product items
      tags:
      - Product Item
  /userlogin:
    post:
      consumes:
      - application/json
      description: Login as a user to access the ecommerce site
      operationId: user-login-email
      parameters:
      - description: User details
        in: body
        name: user_details
        required: true
        schema:
          $ref: '#/definitions/helperStruct.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - Users
  /verifyotp:
    post:
      consumes:
      - application/json
      description: Validate the  OTP sent to use's mobile
      operationId: validate-otp
      parameters:
      - description: OTP sent to user's mobile number
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/helperStruct.VerifyOtp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Validate the OTP to user's mobile
      tags:
      - Otp
  /viewfav/:
    get:
      consumes:
      - application/json
      description: User view product items in favourites
      operationId: view-favourites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can view items in favourites
      tags:
      - Favourites
  /vieworder/{orderId}:
    get:
      consumes:
      - application/json
      description: This function handles requests for retrieving the details of a
        specific order identified by its order ID.
      operationId: view-order-by-id
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched order details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to fetch order details
          schema:
            $ref: '#/definitions/response.Response'
      summary: Retrieves order details for a given order ID, if authorized.
      tags:
      - Order
  /viewprfile:
    get:
      consumes:
      - application/json
      description: Users can visit their profile
      operationId: user-profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User can view their profile
      tags:
      - Users
swagger: "2.0"
